@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Trinode.UI.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Trinode.UI.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender


<PageTitle>Log in</PageTitle>

<section>
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <div class="login-title" style="left: 50%;">
            <h4>Realize o login e bons estudos</h4>
            <hr />
        </div>
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
            <label for="email" class="form-label" style="color: rgb(155, 152, 152);">E-mail</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true"/>
            <label for="password" class="form-label" style="color: rgb(155, 152, 152);">Senha</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="d-flex justify-content-between" style="margin-top: -10px">
            <a class="create-account" id="forgot-password"href="Account/ForgotPassword" >Esqueci minha senha</a>
            <a class="create-account" id="resend-email" href="Account/ResendEmailConfirmation" >Reenviar e-mail</a>
        </div>
        <div>
            <button id="login-submit" type="submit" class="login-button" style="color:#ffffff; border-radius: 40px;">Entrar</button>
        </div>
        <div>
        </div>
    </EditForm>
    <p>
        <button onclick="redirectToPage()" class="login-button" style="color:#ffffff; border-radius: 40px;">Cadastre-se</button>
    </p>
</section>

<script>
    function redirectToPage() {
        window.location.href = "Account/Register";
    }
</script>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            ReturnUrl = ReturnUrl ?? "/home";
            Logger.LogInformation("Usuario logado com sucesso");	
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
